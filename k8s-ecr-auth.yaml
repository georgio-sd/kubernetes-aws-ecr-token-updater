apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-token-updater
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-token-updater
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: aws-token-updater
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: k8s-ecr-auth
  namespace: kube-system
spec:
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 0
  schedule: "0 */11 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: aws-token-updater
          restartPolicy: Never
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              SECRET_NAME=${AWS_ACCOUNT}-${AWS_REGION}-ecr-registry
              EMAIL=anymail.doesnt.matter@email.com
              TOKEN=`aws ecr get-login-password --region $AWS_REGION | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME
              kubectl create secret docker-registry $SECRET_NAME \
              --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="$TOKEN" \
              --docker-email="$EMAIL"
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount aws-token-updater -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: region
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: region
            - name: AWS_ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: account
            image: public.ecr.aws/r5z8h6e2/k8s-ecr-auth
            imagePullPolicy: IfNotPresent
            name: k8s-ecr-auth
